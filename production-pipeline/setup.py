#!/usr/bin/env python3
"""
Setup script for the Sports Trivia Pipeline
This will help you configure your API key and settings.
"""

import os
import sys

def main():
    print("üéØ SPORTS TRIVIA PIPELINE SETUP")
    print("=" * 50)
    print()
    
    # Check if config.py already exists
    if os.path.exists('config.py'):
        print("‚ö†Ô∏è  config.py already exists!")
        overwrite = input("Do you want to overwrite it? (y/n): ").strip().lower()
        if overwrite not in ['y', 'yes']:
            print("Setup cancelled. Keeping existing config.py")
            return
    
    print("Let's set up your pipeline configuration:")
    print()
    
    # Get Gemini API Key
    print("üîë GEMINI API KEY SETUP")
    print("1. Go to: https://makersuite.google.com/app/apikey")
    print("2. Create a new API key")
    print("3. Copy the key (it starts with 'AIzaSy...')")
    print()
    
    api_key = input("Enter your Gemini API key: ").strip()
    
    if not api_key.startswith('AIzaSy'):
        print("‚ùå Invalid API key format. Should start with 'AIzaSy...'")
        return
    
    # Get GCS Bucket name
    print()
    print("‚òÅÔ∏è  GOOGLE CLOUD STORAGE SETUP")
    bucket_name = input("Enter your GCS bucket name (or press Enter for 'trivia-automations-2'): ").strip()
    if not bucket_name:
        bucket_name = "trivia-automations-2"
    
    # Create config.py
    config_content = f'''# Configuration file for the Sports Trivia Pipeline
# Generated by setup.py

# Your Gemini API Key
GEMINI_API_KEY = "{api_key}"

# Google Cloud Storage bucket name
GCS_BUCKET_NAME = "{bucket_name}"

# Optional: Google Cloud Project ID (if different from default)
GCS_PROJECT_ID = None  # Leave as None to use default project

# Optional: Video generation settings
VIDEO_QUALITY = "high"  # "low", "medium", "high"
MAX_VIDEO_LENGTH = 3600  # Maximum video length in seconds (1 hour default)
'''
    
    try:
        with open('config.py', 'w') as f:
            f.write(config_content)
        
        print()
        print("‚úÖ Configuration created successfully!")
        print(f"üìÅ config.py created with your API key and bucket: {bucket_name}")
        print()
        print("üöÄ You can now run the pipeline with:")
        print("   python3 run_pipeline.py")
        print()
        print("üîí Your API key is securely stored in config.py")
        print("   (Don't share this file or commit it to version control)")
        
    except Exception as e:
        print(f"‚ùå Failed to create config.py: {e}")
        return

if __name__ == "__main__":
    main()
