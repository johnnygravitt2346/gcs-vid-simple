import React, { useState, useEffect } from 'react';
import {
  Box,
  Grid,
  Card,
  CardContent,
  Typography,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Chip,
  LinearProgress,
  IconButton,
  Tooltip,
} from '@mui/material';
import {
  PlayArrow,
  Add,
  Refresh,
  Visibility,
  Delete,
  Settings,
} from '@mui/icons-material';
import { useNavigate } from 'react-router-dom';

// Types
interface Job {
  id: string;
  topic: string;
  difficulty: string;
  questionCount: number;
  category: string;
  status: string;
  progress: number;
  createdAt: string;
  updatedAt: string;
}

interface CreateJobRequest {
  topic: string;
  difficulty: string;
  questionCount: number;
  category: string;
  videoStyle: string;
  quality: string;
}

const Dashboard: React.FC = () => {
  const navigate = useNavigate();
  const [jobs, setJobs] = useState<Job[]>([]);
  const [loading, setLoading] = useState(false);
  const [createDialogOpen, setCreateDialogOpen] = useState(false);
  const [newJob, setNewJob] = useState<CreateJobRequest>({
    topic: '',
    difficulty: 'Medium',
    questionCount: 5,
    category: 'General',
    videoStyle: 'modern',
    quality: 'medium',
  });

  useEffect(() => {
    fetchJobs();
    const interval = setInterval(fetchJobs, 10000); // Refresh every 10 seconds
    return () => clearInterval(interval);
  }, []);

  const fetchJobs = async () => {
    try {
      const response = await fetch('/api/jobs');
      if (response.ok) {
        const data = await response.json();
        setJobs(data);
      }
    } catch (error) {
      console.error('Failed to fetch jobs:', error);
    }
  };

  const createJob = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/jobs', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newJob),
      });

      if (response.ok) {
        const result = await response.json();
        setCreateDialogOpen(false);
        setNewJob({
          topic: '',
          difficulty: 'Medium',
          questionCount: 5,
          category: 'General',
          videoStyle: 'modern',
          quality: 'medium',
        });
        fetchJobs();
      }
    } catch (error) {
      console.error('Failed to create job:', error);
    } finally {
      setLoading(false);
    }
  };

  const getStatusColor = (status: string) => {
    const colors: { [key: string]: string } = {
      pending: 'default',
      generating_questions: 'primary',
      generating_tts: 'info',
      generating_videos: 'warning',
      concatenating: 'secondary',
      completed: 'success',
      failed: 'error',
      cancelled: 'default',
    };
    return colors[status] || 'default';
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleString();
  };

  return (
    <Box>
      {/* Header */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Typography variant="h4" component="h1">
          ðŸ§° Trivia Factory Dashboard
        </Typography>
        <Box>
          <Button
            variant="contained"
            startIcon={<Add />}
            onClick={() => setCreateDialogOpen(true)}
            sx={{ mr: 1 }}
          >
            Create New Job
          </Button>
          <Button
            variant="outlined"
            startIcon={<Refresh />}
            onClick={fetchJobs}
          >
            Refresh
          </Button>
        </Box>
      </Box>

      {/* Stats Cards */}
      <Grid container spacing={3} sx={{ mb: 4 }}>
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Typography color="textSecondary" gutterBottom>
                Total Jobs
              </Typography>
              <Typography variant="h4">
                {jobs.length}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Typography color="textSecondary" gutterBottom>
                Active Jobs
              </Typography>
              <Typography variant="h4">
                {jobs.filter(job => !['completed', 'failed', 'cancelled'].includes(job.status)).length}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Typography color="textSecondary" gutterBottom>
                Completed Today
              </Typography>
              <Typography variant="h4">
                {jobs.filter(job => 
                  job.status === 'completed' && 
                  new Date(job.updatedAt).toDateString() === new Date().toDateString()
                ).length}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Typography color="textSecondary" gutterBottom>
                Success Rate
              </Typography>
              <Typography variant="h4">
                {jobs.length > 0 
                  ? Math.round((jobs.filter(job => job.status === 'completed').length / jobs.length) * 100)
                  : 0}%
              </Typography>
            </CardContent>
          </Card>
      </Grid>

      {/* Jobs List */}
      <Card>
        <CardContent>
          <Typography variant="h6" sx={{ mb: 2 }}>
            Recent Jobs
          </Typography>
          {jobs.length === 0 ? (
            <Box sx={{ textAlign: 'center', py: 4 }}>
              <Typography color="textSecondary">
                No jobs yet. Create your first trivia video job!
              </Typography>
            </Box>
          ) : (
            <Box>
              {jobs.map((job) => (
                <Box
                  key={job.id}
                  sx={{
                    display: 'flex',
                    alignItems: 'center',
                    p: 2,
                    border: '1px solid',
                    borderColor: 'divider',
                    borderRadius: 1,
                    mb: 2,
                    '&:hover': {
                      backgroundColor: 'action.hover',
                    },
                  }}
                >
                  <Box sx={{ flexGrow: 1 }}>
                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                      <Typography variant="h6" sx={{ mr: 2 }}>
                        {job.topic}
                      </Typography>
                      <Chip
                        label={job.status.replace(/_/g, ' ')}
                        color={getStatusColor(job.status) as any}
                        size="small"
                      />
                    </Box>
                    <Typography color="textSecondary" variant="body2">
                      {job.category} â€¢ {job.difficulty} â€¢ {job.questionCount} questions
                    </Typography>
                    <Box sx={{ mt: 1 }}>
                      <LinearProgress
                        variant="determinate"
                        value={job.progress}
                        sx={{ height: 8, borderRadius: 4 }}
                      />
                      <Typography variant="caption" color="textSecondary">
                        {job.progress}% complete
                      </Typography>
                    </Box>
                  </Box>
                  <Box sx={{ display: 'flex', gap: 1 }}>
                    <Tooltip title="View Details">
                      <IconButton
                        onClick={() => navigate(`/jobs/${job.id}`)}
                        size="small"
                      >
                        <Visibility />
                      </IconButton>
                    </Tooltip>
                    <Tooltip title="Settings">
                      <IconButton size="small">
                        <Settings />
                      </IconButton>
                    </Tooltip>
                    <Tooltip title="Delete">
                      <IconButton size="small" color="error">
                        <Delete />
                      </IconButton>
                    </Tooltip>
                  </Box>
                </Box>
              ))}
            </Box>
          )}
        </CardContent>
      </Card>

      {/* Create Job Dialog */}
      <Dialog open={createDialogOpen} onClose={() => setCreateDialogOpen(false)} maxWidth="sm" fullWidth>
        <DialogTitle>Create New Trivia Job</DialogTitle>
        <DialogContent>
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, pt: 1 }}>
            <TextField
              label="Topic"
              value={newJob.topic}
              onChange={(e) => setNewJob({ ...newJob, topic: e.target.value })}
              fullWidth
              required
            />
            <Box sx={{ display: 'flex', gap: 2 }}>
              <FormControl fullWidth>
                <InputLabel>Difficulty</InputLabel>
                <Select
                  value={newJob.difficulty}
                  label="Difficulty"
                  onChange={(e) => setNewJob({ ...newJob, difficulty: e.target.value })}
                >
                  <MenuItem value="Easy">Easy</MenuItem>
                  <MenuItem value="Medium">Medium</MenuItem>
                  <MenuItem value="Hard">Hard</MenuItem>
                </Select>
              </FormControl>
              <FormControl fullWidth>
                <InputLabel>Category</InputLabel>
                <Select
                  value={newJob.category}
                  label="Category"
                  onChange={(e) => setNewJob({ ...newJob, category: e.target.value })}
                >
                  <MenuItem value="General">General</MenuItem>
                  <MenuItem value="Science">Science</MenuItem>
                  <MenuItem value="History">History</MenuItem>
                  <MenuItem value="Geography">Geography</MenuItem>
                  <MenuItem value="Entertainment">Entertainment</MenuItem>
                </Select>
              </FormControl>
            </Box>
            <Box sx={{ display: 'flex', gap: 2 }}>
              <TextField
                label="Question Count"
                type="number"
                value={newJob.questionCount}
                onChange={(e) => setNewJob({ ...newJob, questionCount: parseInt(e.target.value) })}
                inputProps={{ min: 1, max: 20 }}
                fullWidth
              />
              <FormControl fullWidth>
                <InputLabel>Quality</InputLabel>
                <Select
                  value={newJob.quality}
                  label="Quality"
                  onChange={(e) => setNewJob({ ...newJob, quality: e.target.value })}
                >
                  <MenuItem value="low">Low (Fast)</MenuItem>
                  <MenuItem value="medium">Medium (Balanced)</MenuItem>
                  <MenuItem value="high">High (Slow)</MenuItem>
                </Select>
              </FormControl>
            </Box>
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setCreateDialogOpen(false)}>Cancel</Button>
          <Button
            onClick={createJob}
            variant="contained"
            disabled={loading || !newJob.topic}
            startIcon={loading ? <LinearProgress /> : <PlayArrow />}
          >
            {loading ? 'Creating...' : 'Create Job'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default Dashboard;
